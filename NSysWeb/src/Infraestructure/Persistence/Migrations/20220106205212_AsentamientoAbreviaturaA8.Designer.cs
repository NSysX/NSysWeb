// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Persistence.Contexts;

namespace Persistence.Migrations
{
    [DbContext(typeof(NSysWebDbContexto))]
    [Migration("20220106205212_AsentamientoAbreviaturaA8")]
    partial class AsentamientoAbreviaturaA8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Asentamiento", b =>
                {
                    b.Property<int>("IdAsentamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Consecutivo de Asentamiento")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int")
                        .HasComment("Codigo Postal");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si el registro esta habilitado ");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("Estatus del registro");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creacion del Registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Ultima Modificacion");

                    b.Property<int>("IdAsentamientoTipo")
                        .HasColumnType("int")
                        .HasComment("El id de la tabla TipoAsentamiento ");

                    b.Property<int>("IdMunicipio")
                        .HasColumnType("int")
                        .HasComment("id del municipio al que pertenece");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("Nombre del asentamiento");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario de Creacion del registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Ultimo usuario que modifico el registro");

                    b.HasKey("IdAsentamiento");

                    b.HasIndex(new[] { "IdAsentamientoTipo" }, "IXFK_Asentamiento_AsentamientoTipo");

                    b.HasIndex(new[] { "IdMunicipio", "IdAsentamientoTipo", "Nombre" }, "IX_NoDuplicado")
                        .IsUnique();

                    b.ToTable("Asentamiento");

                    b
                        .HasComment("Nombre del asentamiento");
                });

            modelBuilder.Entity("Domain.Entities.AsentamientoTipo", b =>
                {
                    b.Property<int>("IdAsentamientoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador unico ")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasComment("Abreviatura de la descripcion de tipo de asentamiento");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si esta disponible el registro ");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creacion del registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Ultima Fecha de Modificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Nombre del tipo de Asentamiento ");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que creo el registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Ultimo usuario que modifico el registro");

                    b.HasKey("IdAsentamientoTipo");

                    b.HasIndex(new[] { "Abreviatura" }, "IX_NoDuplicadoAbre")
                        .IsUnique();

                    b.HasIndex(new[] { "Nombre" }, "IX_NoDuplicadoAsen")
                        .IsUnique();

                    b.ToTable("AsentamientoTipo");

                    b
                        .HasComment("Los tipos de Asentamientos como Ejido, Colonia , Poblado");
                });

            modelBuilder.Entity("Domain.Entities.CorreoElectronico", b =>
                {
                    b.Property<int>("IdCorreoElectronico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador unico")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("El Email o Correo electroinico");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si el registro esta habilitado para trabajar con el, borrado logico");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creacion del registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha modificacion");

                    b.Property<string>("TipoCorreo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Tipo de email personal trabajo ");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario Creacion del registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Ultimo usuario que modifico el registro");

                    b.HasKey("IdCorreoElectronico");

                    b.HasIndex(new[] { "Correo" }, "IX_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicado1");

                    b.ToTable("CorreoElectronico");

                    b
                        .HasComment("Todos lo Correos Electronicos de personas y Empresas");
                });

            modelBuilder.Entity("Domain.Entities.Direccion", b =>
                {
                    b.Property<int>("IdDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Id Numerico Consecutivo de direcciones")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<Point>("CoordenadasGeo")
                        .HasColumnType("geography")
                        .HasComment("Coordenadas geograficas , Acepta nulos");

                    b.Property<string>("EntreLaCalle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EsFiscal")
                        .HasColumnType("bit")
                        .HasComment("Si la direccion es fiscal para la emision de facturas");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si esta disponible el registro");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("Estatus de la direccion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de creacion del registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Ultima Modificacion");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasComment("Foto de la ubicacion");

                    b.Property<int>("IdAsentamiento")
                        .HasColumnType("int")
                        .HasComment("El id de la tabla Asentamiento");

                    b.Property<string>("NumeroExterior")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("NumeroInterior")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasComment("Referencias para identificar la direccion");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que creo el registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que hizo la ultima modificacion");

                    b.Property<string>("YlaCalle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("YLaCalle");

                    b.HasKey("IdDireccion");

                    b.HasIndex(new[] { "IdAsentamiento" }, "IXFK_Direccion_Asentamiento");

                    b.ToTable("Direccion");

                    b
                        .HasComment("Registra todas las direcciones");
                });

            modelBuilder.Entity("Domain.Entities.Documento", b =>
                {
                    b.Property<int>("IdDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("El id de la tabla Documento")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoUnico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("La cadena unica del documento");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si el registro esta disponible para usarlo");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("algun estatus para el registro");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creacion de registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Ultima Fecha de modificacion");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasComment("Foto del documento");

                    b.Property<int>("IdDocumentoTipo")
                        .HasColumnType("int")
                        .HasComment("El Identificador unico de la tabla DocumentoTipo");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Ultimo usuario que modifico el registro");

                    b.HasKey("IdDocumento");

                    b.HasIndex(new[] { "IdDocumentoTipo" }, "IXFK_Documento_DocumentoTipo");

                    b.HasIndex(new[] { "CodigoUnico" }, "IX_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicado2");

                    b.ToTable("Documento");

                    b
                        .HasComment("Se incluyen todos los documentos que las personas fisicas y morales pueden tener");
                });

            modelBuilder.Entity("Domain.Entities.DocumentoTipo", b =>
                {
                    b.Property<int>("IdDocumentoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("El identificador unico de registro")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasComment("Abreviatura del documento");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si el registro esta disponible para trabajar con el");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("Estatus del registro");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha en que se creo el registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la ultima modificacion del registro");

                    b.Property<int>("Longitud")
                        .HasColumnType("int")
                        .HasComment("La longitud de caracteres permitido para la Cadena Unica");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Nombre completo del documento ");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que creo el registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("El usuario de la ultima modificacion");

                    b.HasKey("IdDocumentoTipo");

                    b.HasIndex(new[] { "Abreviatura" }, "IX_NoDuplicadoAbre")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicadoAbre1");

                    b.HasIndex(new[] { "Nombre" }, "IX_NoDuplicadoNom")
                        .IsUnique();

                    b.ToTable("DocumentoTipo");

                    b
                        .HasComment("Se capturan los tipos de documentos para que esten disponibles");
                });

            modelBuilder.Entity("Domain.Entities.Estado", b =>
                {
                    b.Property<int>("IdEstado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("id del estado")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Clave")
                        .HasColumnType("int")
                        .HasComment("Clave del Estado");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("si esta disponible el registro");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de creacion del registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la ultima modificacion");

                    b.Property<int>("IdPais")
                        .HasColumnType("int")
                        .HasComment("Id al pais que pertenece");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasComment("Nombre del estado del pais");

                    b.Property<string>("RenapoAbrev")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasComment("Abreviatura de nombre segun Registro de Poblacion (RENAPO)");

                    b.Property<string>("TresDigitosAbrev")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasComment("Abreviatura de nombre a Tres Digitos");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que creo el registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario de la ultima modificacion");

                    b.Property<string>("VariableAbrev")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasComment("Abreviatura de nombre de tipo Variable");

                    b.HasKey("IdEstado");

                    b.HasIndex("IdPais");

                    b.HasIndex(new[] { "Clave" }, "IX_NoDuplicadoClave")
                        .IsUnique();

                    b.HasIndex(new[] { "Nombre" }, "IX_NoDuplicadoNombre")
                        .IsUnique();

                    b.HasIndex(new[] { "RenapoAbrev" }, "IX_NoDuplicadoRenapoAbrev")
                        .IsUnique();

                    b.HasIndex(new[] { "TresDigitosAbrev" }, "IX_NoDuplicadoTresDigitosAbrev")
                        .IsUnique();

                    b.HasIndex(new[] { "VariableAbrev" }, "IX_NoDuplicadoVariableAbrev")
                        .IsUnique();

                    b.ToTable("Estado");

                    b
                        .HasComment("Estado de paises");
                });

            modelBuilder.Entity("Domain.Entities.EstadoCivil", b =>
                {
                    b.Property<int>("IdEstadoCivil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Id consecutivo ")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Descripcion del estado civil");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si el registro esta habilitado");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("Estatus del estado civil");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de creacion del registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la ultima modificacion");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("El usuario que creo el registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Ultimo usuario que modifico el registro");

                    b.HasKey("IdEstadoCivil");

                    b.HasIndex(new[] { "Descripcion" }, "IX_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicado3");

                    b.ToTable("EstadoCivil");

                    b
                        .HasComment("Los Estados Civiles de las Personas");
                });

            modelBuilder.Entity("Domain.Entities.Municipio", b =>
                {
                    b.Property<int>("IdMunicipio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("id consecutivo de municipio")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Clave")
                        .HasColumnType("int")
                        .HasComment("Clave unica de municipio por estado");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si el registro esta disponible");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creacion del registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la utlima modificacion");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int")
                        .HasComment("id que pertenece al estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Nombre del Municipio");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que creo el Registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Ultimo usuario que modifico el registro");

                    b.HasKey("IdMunicipio");

                    b.HasIndex(new[] { "IdEstado" }, "IXFK_Municipio_Estado");

                    b.HasIndex(new[] { "Abreviatura" }, "IX_NoDuplicadoAbrevMuni")
                        .IsUnique();

                    b.HasIndex(new[] { "IdEstado", "Clave" }, "IX_NoDuplicadoIdEstadoIdMuni")
                        .IsUnique();

                    b.HasIndex(new[] { "Nombre" }, "IX_NoDuplicadoNomMuni")
                        .IsUnique();

                    b.ToTable("Municipio");

                    b
                        .HasComment("Municipios de Mexico");
                });

            modelBuilder.Entity("Domain.Entities.Nacionalidad", b =>
                {
                    b.Property<int>("IdNacionalidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Id unico para el registro")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("concepto de nacionalidad de la persona");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("si esta disponible el registro ");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("El Estatus del Registro");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha en que se creo el registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("fecha de la ultima modificacion");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que creo el registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("El ultimo Usuario que modifico el registro");

                    b.HasKey("IdNacionalidad");

                    b.HasIndex(new[] { "Descripcion" }, "IX_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicado4");

                    b.ToTable("Nacionalidad");

                    b
                        .HasComment("Catalogo de Nacionalidades con su bandera");
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Property<int>("IdPais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador unico")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasComment("Abreviatura del nombre del Pais");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si el registro esta disponible para trabajar con el");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("Estatus del registro");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha en que se creo el registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la ultima modificacion del registro");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true)
                        .HasComment("Nombre del Pais");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que creo el registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("El usuario de la ultima modificacion");

                    b.HasKey("IdPais");

                    b.HasIndex(new[] { "Abreviatura" }, "IX_NoDuplicadoAbrevPais")
                        .IsUnique();

                    b.HasIndex(new[] { "Nombre" }, "IX_NoDuplicadoNombrePais")
                        .IsUnique();

                    b.ToTable("Pais");

                    b
                        .HasComment("Catalogo de Paises");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("id consecutivo de la tabla personas")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Apellido materno de la persona");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Apellido paterno de la persona");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si el registro esta habilitado ");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("Estatus de la Persona ");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Creacion del registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la ultima modificacion ");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasComment("Fecha de nacimiento de la persona");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasComment("El path de la foto de la persona");

                    b.Property<int>("IdEstadoCivil")
                        .HasColumnType("int")
                        .HasComment("El estado civil de la persona Casado, Divorciado, Soltero, union libre");

                    b.Property<int>("IdNacionalidad")
                        .HasColumnType("int")
                        .HasComment("id Nacionalidad de la persona");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Nombre o Nombres de la persona");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("Notas importantes de la persona");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("M = Masculino , F = Femenino");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que creo el registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Ultimo usuario que modifico");

                    b.HasKey("IdPersona");

                    b.HasIndex(new[] { "IdEstadoCivil" }, "IXFK_Persona_EstadoCivil");

                    b.HasIndex(new[] { "IdNacionalidad" }, "IXFK_Persona_Nacionalidad");

                    b.HasIndex(new[] { "ApellidoPaterno", "ApellidoMaterno", "Nombres" }, "IX_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicado5");

                    b.ToTable("Persona");

                    b
                        .HasComment("Almacena la informacion de todas las personas");
                });

            modelBuilder.Entity("Domain.Entities.PersonaCorreoElectronico", b =>
                {
                    b.Property<int>("IdPersonaCorreoElectronico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCorreoElectronico")
                        .HasColumnType("int")
                        .HasComment("Identificador unico de la tabla de Correo Electronico");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int")
                        .HasComment("Identificador unico del registro de persona ");

                    b.HasKey("IdPersonaCorreoElectronico");

                    b.HasIndex(new[] { "IdCorreoElectronico" }, "IXFK_PersonaCorreoElectronico_CorreoElectronico");

                    b.HasIndex(new[] { "IdPersona" }, "IXFK_PersonaCorreoElectronico_Persona");

                    b.HasIndex(new[] { "IdPersona", "IdCorreoElectronico" }, "IX_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicado6");

                    b.ToTable("PersonaCorreoElectronico");

                    b
                        .HasComment("Los Correos electronicos que tiene una persona");
                });

            modelBuilder.Entity("Domain.Entities.PersonaDireccion", b =>
                {
                    b.Property<int>("IdPersonaDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdDireccion")
                        .HasColumnType("int")
                        .HasComment("El id de la Tabla Direccion");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int")
                        .HasComment("El id de la tabla de Personas");

                    b.HasKey("IdPersonaDireccion");

                    b.HasIndex(new[] { "IdDireccion" }, "IXFK_PersonaDireccion_Direccion");

                    b.HasIndex(new[] { "IdPersona" }, "IXFK_PersonaDireccion_Persona");

                    b.HasIndex(new[] { "IdPersona", "IdDireccion" }, "IX_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicado7");

                    b.ToTable("PersonaDireccion");

                    b
                        .HasComment("Las direcciones que tiene una persona");
                });

            modelBuilder.Entity("Domain.Entities.PersonaDocumento", b =>
                {
                    b.Property<int>("IdPersonaDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdDocumento")
                        .HasColumnType("int")
                        .HasComment("IdDocumento de la Tabla Documento");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int")
                        .HasComment("El IdPersona de la tabla Personas");

                    b.HasKey("IdPersonaDocumento");

                    b.HasIndex(new[] { "IdDocumento" }, "IXFK_PersonaDocumento_Documento");

                    b.HasIndex(new[] { "IdPersona" }, "IXFK_PersonaDocumento_Persona");

                    b.HasIndex(new[] { "IdPersona", "IdDocumento" }, "IX_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicado8");

                    b.ToTable("PersonaDocumento");

                    b
                        .HasComment("La relacion de los documentos que puede tener una persona");
                });

            modelBuilder.Entity("Domain.Entities.PersonaTelefono", b =>
                {
                    b.Property<int>("IdPersonaTelefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPersona")
                        .HasColumnType("int")
                        .HasComment("El identificador de la tabla persona");

                    b.Property<int>("IdTelefono")
                        .HasColumnType("int")
                        .HasComment("El identificador de la tabla telefono");

                    b.HasKey("IdPersonaTelefono");

                    b.HasIndex(new[] { "IdPersona" }, "IXFK_PersonaTelefono_Persona");

                    b.HasIndex(new[] { "IdTelefono" }, "IXFK_PersonaTelefono_Telefono");

                    b.HasIndex(new[] { "IdPersona", "IdTelefono" }, "IX_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicado9");

                    b.ToTable("PersonaTelefono");

                    b
                        .HasComment("Los numeros de telefono de las personas");
                });

            modelBuilder.Entity("Domain.Entities.SysDominioCorreo", b =>
                {
                    b.Property<int>("IdSysDominioCorreo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador unico ")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dominio")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasComment("Dominio Hotmail.com, Gmail.com, etc..");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si el registro estra disponible, borrado Logico");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("estatus del registro");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de creacion del registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la ultima modificacion");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que creo el registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que hizo la ultima modificacion");

                    b.HasKey("IdSysDominioCorreo");

                    b.HasIndex(new[] { "Dominio" }, "IX_NoDuplicado")
                        .IsUnique()
                        .HasDatabaseName("IX_NoDuplicado10");

                    b.ToTable("SysDominioCorreo");

                    b
                        .HasComment("Dominios precapturados para los correos");
                });

            modelBuilder.Entity("Domain.Entities.Telefono", b =>
                {
                    b.Property<int>("IdTelefono")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador unico de la tabla telefono")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoPais")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasComment("Codigo Telefonico del Pais");

                    b.Property<bool>("EsHabilitado")
                        .HasColumnType("bit")
                        .HasComment("Si el registro esta habilitado para trabajar");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("Estatus del registro");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de creacion del registro");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime")
                        .HasComment("Ultima fecha de Modificacion del registro");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasComment("Numero telefonico");

                    b.Property<string>("TipoTelefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Celular o Fijo");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Usuario que creo el registro");

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Ultimo usuario que modifico el registro");

                    b.HasKey("IdTelefono");

                    b.HasIndex(new[] { "CodigoPais", "Numero" }, "IX_NoDuplicadoCodigoPaisNumero")
                        .IsUnique();

                    b.ToTable("Telefono");

                    b
                        .HasComment("Todos los Telefonos de personas y empresas");
                });

            modelBuilder.Entity("Domain.Entities.Asentamiento", b =>
                {
                    b.HasOne("Domain.Entities.AsentamientoTipo", "AsentamientoTipo")
                        .WithMany("Asentamientos")
                        .HasForeignKey("IdAsentamientoTipo")
                        .HasConstraintName("FK_Asentamiento_AsentamientoTipo")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Municipio", "Municipio")
                        .WithMany("Asentamientos")
                        .HasForeignKey("IdMunicipio")
                        .HasConstraintName("FK_Asentamiento_Municipio")
                        .IsRequired();

                    b.Navigation("AsentamientoTipo");

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("Domain.Entities.Direccion", b =>
                {
                    b.HasOne("Domain.Entities.Asentamiento", "Asentamiento")
                        .WithMany("Direcciones")
                        .HasForeignKey("IdAsentamiento")
                        .HasConstraintName("FK_Direccion_Asentamiento")
                        .IsRequired();

                    b.Navigation("Asentamiento");
                });

            modelBuilder.Entity("Domain.Entities.Documento", b =>
                {
                    b.HasOne("Domain.Entities.DocumentoTipo", "DocumentoTipo")
                        .WithMany("Documentos")
                        .HasForeignKey("IdDocumentoTipo")
                        .HasConstraintName("FK_Documento_DocumentoTipo")
                        .IsRequired();

                    b.Navigation("DocumentoTipo");
                });

            modelBuilder.Entity("Domain.Entities.Estado", b =>
                {
                    b.HasOne("Domain.Entities.Pais", "Pais")
                        .WithMany("Estados")
                        .HasForeignKey("IdPais")
                        .HasConstraintName("FK_Estado_Pais")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Domain.Entities.Municipio", b =>
                {
                    b.HasOne("Domain.Entities.Estado", "Estado")
                        .WithMany("Municipios")
                        .HasForeignKey("IdEstado")
                        .HasConstraintName("FK_Municipio_Estado")
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.HasOne("Domain.Entities.EstadoCivil", "EstadoCivil")
                        .WithMany("Personas")
                        .HasForeignKey("IdEstadoCivil")
                        .HasConstraintName("FK_Persona_EstadoCivil")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Nacionalidad", "Nacionalidad")
                        .WithMany("Personas")
                        .HasForeignKey("IdNacionalidad")
                        .HasConstraintName("FK_Persona_Nacionalidad")
                        .IsRequired();

                    b.Navigation("EstadoCivil");

                    b.Navigation("Nacionalidad");
                });

            modelBuilder.Entity("Domain.Entities.PersonaCorreoElectronico", b =>
                {
                    b.HasOne("Domain.Entities.CorreoElectronico", "CorreoElectronico")
                        .WithMany("PersonasCorreosElectronicos")
                        .HasForeignKey("IdCorreoElectronico")
                        .HasConstraintName("FK_PersonaCorreoElectronico_CorreoElectronico")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany("PersonaCorreosElectronicos")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("FK_PersonaCorreoElectronico_Persona")
                        .IsRequired();

                    b.Navigation("CorreoElectronico");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.PersonaDireccion", b =>
                {
                    b.HasOne("Domain.Entities.Direccion", "Direccion")
                        .WithMany("PersonaDirecciones")
                        .HasForeignKey("IdDireccion")
                        .HasConstraintName("FK_PersonaDireccion_Direccion")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany("PersonaDirecciones")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("FK_PersonaDireccion_Persona")
                        .IsRequired();

                    b.Navigation("Direccion");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.PersonaDocumento", b =>
                {
                    b.HasOne("Domain.Entities.Documento", "Documento")
                        .WithMany("PersonaDocumentos")
                        .HasForeignKey("IdDocumento")
                        .HasConstraintName("FK_PersonaDocumento_Documento")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany("PersonaDocumentos")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("FK_PersonaDocumento_Persona")
                        .IsRequired();

                    b.Navigation("Documento");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.PersonaTelefono", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany("PersonaTelefonos")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("FK_PersonaTelefono_Persona")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Telefono", "Telefono")
                        .WithMany("PersonaTelefonos")
                        .HasForeignKey("IdTelefono")
                        .HasConstraintName("FK_PersonaTelefono_Telefono")
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Telefono");
                });

            modelBuilder.Entity("Domain.Entities.Asentamiento", b =>
                {
                    b.Navigation("Direcciones");
                });

            modelBuilder.Entity("Domain.Entities.AsentamientoTipo", b =>
                {
                    b.Navigation("Asentamientos");
                });

            modelBuilder.Entity("Domain.Entities.CorreoElectronico", b =>
                {
                    b.Navigation("PersonasCorreosElectronicos");
                });

            modelBuilder.Entity("Domain.Entities.Direccion", b =>
                {
                    b.Navigation("PersonaDirecciones");
                });

            modelBuilder.Entity("Domain.Entities.Documento", b =>
                {
                    b.Navigation("PersonaDocumentos");
                });

            modelBuilder.Entity("Domain.Entities.DocumentoTipo", b =>
                {
                    b.Navigation("Documentos");
                });

            modelBuilder.Entity("Domain.Entities.Estado", b =>
                {
                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("Domain.Entities.EstadoCivil", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Entities.Municipio", b =>
                {
                    b.Navigation("Asentamientos");
                });

            modelBuilder.Entity("Domain.Entities.Nacionalidad", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Navigation("Estados");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Navigation("PersonaCorreosElectronicos");

                    b.Navigation("PersonaDirecciones");

                    b.Navigation("PersonaDocumentos");

                    b.Navigation("PersonaTelefonos");
                });

            modelBuilder.Entity("Domain.Entities.Telefono", b =>
                {
                    b.Navigation("PersonaTelefonos");
                });
#pragma warning restore 612, 618
        }
    }
}
